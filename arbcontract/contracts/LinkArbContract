// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import {FunctionsClient} from "@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol";
import {ConfirmedOwner} from "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol";
import {LinkTokenInterface} from "@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol";
import {FunctionsRequest} from "@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol";
import {VRFCoordinatorV2Interface} from "@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol";
import {VRFConsumerBaseV2} from "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol";


contract ArbContract is FunctionsClient, {
     // JavaScript source code
    // Fetch character name from the Star Wars API.
    // Documentation: https://swapi.info/people
    string source =
        "const characterId = args[0];"
        "const apiResponse = await Functions.makeHttpRequest({"
        "url: `https://swapi.info/api/people/${characterId}/`"
        "});"
        "if (apiResponse.error) {"
        "throw Error('Request failed');"
        "}"
        "const { data } = apiResponse;"
        "return Functions.encodeString(data.name);";

    uint64 public s_subscriptionId = 8867;


    enum Ruling {
        None,
        PlaintiffWins,
        DefendantWins
    }

    function addConsumer(address consumerAddress) internal onlyJudge {
        // Add a consumer contract to the subscription.
        COORDINATOR.addConsumer(s_subscriptionId, consumerAddress);
    }

    function removeConsumer(address consumerAddress) internal onlyJudge {
        // Remove a consumer contract from the subscription.
        COORDINATOR.removeConsumer(s_subscriptionId, consumerAddress);
    }

    struct Evidence {
        address user;
        string statement;
        string cid;
    }

    // Struct that represents the case of the case.
    struct Metadata {
        address owner;
        string network;
        uint256 createdAt;
        string name;
        string description;
        Evidence plaintiff;
        Evidence defendant;
        address judge;
        uint256 closedAt;
        uint256 compensation;
        string recommendation;
        Ruling ruling;
    }

    bytes32 public s_lastRequestId;
    bytes public s_lastResponse;
    bytes public s_lastError;

    error UnexpectedRequestID(bytes32 requestId);

    event Response(bytes32 indexed requestId, bytes response, bytes err);

    // metadata
    Metadata private metadata;

    modifier onlyParties() {
        require(
            msg.sender == metadata.plaintiff.user ||
                msg.sender == metadata.defendant.user,
            'Only involved parties can call this function'
        );
        _;
    }

    // Event to log arbitration completion.
    event CaseClosed(
        address indexed judge,
        Ruling ruling,
        uint256 compensation
    );
    event EvidenceSubmitted(address indexed submitter, string evidence);

    // Constructor to initialize the contract
    constructor(
        string memory _name,
        string memory _description,
        string memory _network,
        address _plaintiff,
        address _defendant,
        address _judge,
        address _router
    ) FunctionsClient(_router) ConfirmedOwner(msg.sender) VRFConsumerBaseV2(vrfCoordinator)  {
        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);
        LINKTOKEN = LinkTokenInterface(link_token_contract);
        metadata = Metadata(
            msg.sender,
            _network,
            block.timestamp,
            _name,
            _description,
            Evidence(_plaintiff, "", ""),
            Evidence(_defendant, "", ""),
            _judge,
            0,
            0,
            "",
            Ruling.None
        );
        addConsumer(address(this));
    }

    function submitEvidence(string memory _evidence, string memory _cid) public onlyParties {
        // Logic to submit evidence
        // For simplicity, let's assume evidence is just logged
        emit EvidenceSubmitted(msg.sender, _evidence);
        if (msg.sender == metadata.plaintiff.user) {
            metadata.plaintiff = Evidence(msg.sender, _evidence, _cid);
        } else {
            metadata.defendant = Evidence(msg.sender, _evidence, _cid);
        }
    }

    function makeRuling(
        Ruling _ruling,
        uint256 _compensation
    ) public onlyJudge {
        require(metadata.ruling == Ruling.None, 'Ruling already made');

        metadata.ruling = _ruling;
        metadata.compensation = _compensation;
        metadata.closedAt = block.timestamp;

        emit CaseClosed(metadata.judge, _ruling, _compensation);
        removeConsumer(address(this));
    }

    function withdrawCompensation() public {
        require(metadata.closedAt != 0, 'Case is not closed yet');
        // require that the balance provided was nonzero when the case was created.
        require(metadata.compensation > 0, 'No compensation available');
        require(
            msg.sender == metadata.plaintiff.user || msg.sender == metadata.defendant.user,
            'You are not entitled to compensation'
        );
        Ruling currentRuling = metadata.ruling;
        require(
            currentRuling == Ruling.PlaintiffWins && msg.sender == metadata.plaintiff.user,
            'You are not entitled to compensation'
        );
        require(
            currentRuling == Ruling.DefendantWins && msg.sender == metadata.defendant.user,
            'You are not entitled to compensation'
        );

        uint256 amount = metadata.compensation;
        metadata.compensation = 0;

        payable(msg.sender).transfer(amount);
    }

    // https://docs.chain.link/chainlink-functions/tutorials/api-query-parameters
    // https://docs.chain.link/chainlink-functions/getting-started#add-a-consumer-to-your-subscription
   function sendRequest(
        string memory source,
        bytes memory encryptedSecretsUrls,
        uint8 donHostedSecretsSlotID,
        uint64 donHostedSecretsVersion,
        string[] memory args,
        bytes[] memory bytesArgs,
        uint64 subscriptionId,
        uint32 gasLimit,
        bytes32 donID
    ) internal onlyJudge returns (bytes32 requestId) {
        FunctionsRequest.Request memory req;
        FunctionsRequest.initializeRequestForInlineJavaScript(req, source);
        if (encryptedSecretsUrls.length > 0)
            FunctionsRequest.addSecretsReference(req, encryptedSecretsUrls);
        else if (donHostedSecretsVersion > 0) {
            FunctionsRequest.addDONHostedSecrets(
                req,
                donHostedSecretsSlotID,
                donHostedSecretsVersion
            );
        }
        if (args.length > 0) FunctionsRequest.setArgs(req, args);
        if (bytesArgs.length > 0) FunctionsRequest.setBytesArgs(req, bytesArgs);
        s_lastRequestId = _sendRequest(
            FunctionsRequest.encodeCBOR(req),
            subscriptionId,
            gasLimit,
            donID
        );
        return s_lastRequestId;
    }

        function sendRequestCBOR(
        bytes memory request,
        uint64 subscriptionId,
        uint32 gasLimit,
        bytes32 donID
    ) external onlyJudge returns (bytes32 requestId) {
        s_lastRequestId = _sendRequest(
            request,
            subscriptionId,
            gasLimit,
            donID
        );
        return s_lastRequestId;
    }

        function fulfillRequest(
        bytes32 requestId,
        bytes memory response,
        bytes memory err
    ) internal override {
        if (s_lastRequestId != requestId) {
            revert UnexpectedRequestID(requestId);
        }
        s_lastResponse = response;
        s_lastError = err;
        emit Response(requestId, s_lastResponse, s_lastError);
    }

    // get metadata
    function getMetadata() public view returns (Metadata memory) {
        // if judge
        if (msg.sender == metadata.judge) {
            metadata.recommendation = "Plaintiff wins";
        } else {
            metadata.recommendation = "";
        }
        return metadata;
    }
}
